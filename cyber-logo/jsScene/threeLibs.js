THREE.DigitalGlitch={uniforms:{tDiffuse:{value:null},tDisp:{value:null},byp:{value:0},amount:{value:.08},angle:{value:.02},seed:{value:.02},seed_x:{value:.02},seed_y:{value:.02},distortion_x:{value:.5},distortion_y:{value:.6},col_s:{value:.05},on:{value:0}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform int byp;\nuniform sampler2D tDiffuse;\nuniform sampler2D tDisp;\nuniform float amount;\nuniform float angle;\nuniform float seed;\nuniform float seed_x;\nuniform float seed_y;\nuniform float distortion_x;\nuniform float distortion_y;\nuniform float col_s;\nuniform float on;\nvarying vec2 vUv;\nfloat rand(vec2 co){\nreturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid main() {\nif(byp<1 && on > 0.0) {\nvec2 p = vUv;\nfloat xs = floor(gl_FragCoord.x / 0.5);\nfloat ys = floor(gl_FragCoord.y / 0.5);\nvec4 normal = texture2D (tDisp, p*seed*seed);\nif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\nif(seed_x>0.){\np.y = 1. - (p.y + distortion_y);\n}\nelse {\np.y = distortion_y;\n}\n}\nif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\nif(seed_y>0.){\np.x=distortion_x;\n}\nelse {\np.x = 1. - (p.x + distortion_x);\n}\n}\np.x+=normal.x*seed_x*(seed/5.);\np.y+=normal.y*seed_y*(seed/5.);\nvec2 offset = amount * vec2( cos(angle), sin(angle));\nvec4 cr = texture2D(tDiffuse, p + offset);\nvec4 cga = texture2D(tDiffuse, p);\nvec4 cb = texture2D(tDiffuse, p - offset);\ngl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\nvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\ngl_FragColor = gl_FragColor+ snow;\n}\nelse {\ngl_FragColor=texture2D (tDiffuse, vUv);\n}\n}"};
THREE.EffectComposer=function(a,b){this.renderer=a;if(void 0===b){var c={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat,stencilBuffer:!1},e=a.getDrawingBufferSize();b=new THREE.WebGLRenderTarget(e.width,e.height,c);b.texture.name="EffectComposer.rt1"}this.renderTarget1=b;this.renderTarget2=b.clone();this.renderTarget2.texture.name="EffectComposer.rt2";this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;this.passes=[];void 0===THREE.CopyShader&&
console.error("THREE.EffectComposer relies on THREE.CopyShader");void 0===THREE.ShaderPass&&console.error("THREE.EffectComposer relies on THREE.ShaderPass");this.copyPass=new THREE.ShaderPass(THREE.CopyShader)};
Object.assign(THREE.EffectComposer.prototype,{swapBuffers:function(){var a=this.readBuffer;this.readBuffer=this.writeBuffer;this.writeBuffer=a},addPass:function(a){this.passes.push(a);var b=this.renderer.getDrawingBufferSize();a.setSize(b.width,b.height)},insertPass:function(a,b){this.passes.splice(b,0,a)},render:function(a){var b=!1,c,e=this.passes.length;for(c=0;c<e;c++){var d=this.passes[c];if(!1!==d.enabled){d.render(this.renderer,this.writeBuffer,this.readBuffer,a,b);if(d.needsSwap){if(b){var f=
this.renderer.context;f.stencilFunc(f.NOTEQUAL,1,4294967295);this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,a);f.stencilFunc(f.EQUAL,1,4294967295)}this.swapBuffers()}void 0!==THREE.MaskPass&&(d instanceof THREE.MaskPass?b=!0:d instanceof THREE.ClearMaskPass&&(b=!1))}}},reset:function(a){if(void 0===a){var b=this.renderer.getDrawingBufferSize();a=this.renderTarget1.clone();a.setSize(b.width,b.height)}this.renderTarget1.dispose();this.renderTarget2.dispose();this.renderTarget1=
a;this.renderTarget2=a.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2},setSize:function(a,b){this.renderTarget1.setSize(a,b);this.renderTarget2.setSize(a,b);for(var c=0;c<this.passes.length;c++)this.passes[c].setSize(a,b)}});THREE.Pass=function(){this.needsSwap=this.enabled=!0;this.renderToScreen=this.clear=!1};Object.assign(THREE.Pass.prototype,{setSize:function(a,b){},render:function(a,b,c,e,d){console.error("THREE.Pass: .render() must be implemented in derived pass.")}});
THREE.ShaderPass=function(a,b){THREE.Pass.call(this);this.textureID=void 0!==b?b:"tDiffuse";a instanceof THREE.ShaderMaterial?(this.uniforms=a.uniforms,this.material=a):a&&(this.uniforms=THREE.UniformsUtils.clone(a.uniforms),this.material=new THREE.ShaderMaterial({defines:a.defines||{},uniforms:this.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader}));this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,
2),null);this.quad.frustumCulled=!1;this.scene.add(this.quad)};THREE.ShaderPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.ShaderPass,render:function(a,b,c,d,e){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=c.texture);this.quad.material=this.material;this.renderToScreen?a.render(this.scene,this.camera):a.render(this.scene,this.camera,b,this.clear)}});
THREE.GlitchPass=function(a){THREE.Pass.call(this);void 0===THREE.DigitalGlitch&&console.error("THREE.GlitchPass relies on THREE.DigitalGlitch");var b=THREE.DigitalGlitch;this.uniforms=THREE.UniformsUtils.clone(b.uniforms);void 0==a&&(a=64);this.uniforms.tDisp.value=this.generateHeightmap(a);this.uniforms.on.value=0;this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:b.vertexShader,fragmentShader:b.fragmentShader});this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=
new THREE.Scene;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null);this.quad.frustumCulled=!1;this.scene.add(this.quad);this.goWild=!1;this.curF=0;this.generateTrigger()};
THREE.GlitchPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.GlitchPass,render:function(a,b,e,c,d){this.uniforms.tDiffuse.value=e.texture;this.uniforms.seed.value=Math.random();this.uniforms.byp.value=0;0==this.curF%this.randX||1==this.goWild?(this.uniforms.amount.value=Math.random()/90,this.uniforms.angle.value=THREE.Math.randFloat(-Math.PI,Math.PI),this.uniforms.seed_x.value=THREE.Math.randFloat(0,1),this.uniforms.seed_y.value=THREE.Math.randFloat(0,1),this.uniforms.distortion_x.value=
THREE.Math.randFloat(-.3,.3),this.uniforms.distortion_y.value=THREE.Math.randFloat(-.3,.3),this.curF=0,this.generateTrigger()):this.curF%this.randX<this.randX/5?(this.uniforms.amount.value=Math.random()/90,this.uniforms.angle.value=THREE.Math.randFloat(-Math.PI,Math.PI),this.uniforms.distortion_x.value=THREE.Math.randFloat(0,1),this.uniforms.distortion_y.value=THREE.Math.randFloat(0,1),this.uniforms.seed_x.value=THREE.Math.randFloat(-.3,.3),this.uniforms.seed_y.value=THREE.Math.randFloat(-.3,.3)):
0==this.goWild&&(this.uniforms.byp.value=10);this.curF++;this.quad.material=this.material;this.renderToScreen?a.render(this.scene,this.camera):a.render(this.scene,this.camera,b,this.clear)},generateTrigger:function(){this.randX=THREE.Math.randInt(120,240)},generateHeightmap:function(a){for(var b=new Float32Array(a*a*3),e=a*a,c=0;c<e;c++){var d=THREE.Math.randFloat(0,1);b[3*c]=d;b[3*c+1]=d;b[3*c+2]=d}a=new THREE.DataTexture(b,a,a,THREE.RGBFormat,THREE.FloatType);a.needsUpdate=!0;return a}});
THREE.RenderPass=function(a,b,c,e,d){THREE.Pass.call(this);this.scene=a;this.camera=b;this.overrideMaterial=c;this.clearColor=e;this.clearAlpha=void 0!==d?d:0;this.clear=!0;this.needsSwap=this.clearDepth=!1};
THREE.RenderPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.RenderPass,render:function(a,b,c,e,d){b=a.autoClear;a.autoClear=!1;this.scene.overrideMaterial=this.overrideMaterial;if(this.clearColor){var f=a.getClearColor().getHex();var g=a.getClearAlpha();a.setClearColor(this.clearColor,this.clearAlpha)}this.clearDepth&&a.clearDepth();a.render(this.scene,this.camera,this.renderToScreen?null:c,this.clear);this.clearColor&&a.setClearColor(f,g);this.scene.overrideMaterial=
null;a.autoClear=b}});THREE.CopyShader={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float opacity;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\nvec4 texel = texture2D( tDiffuse, vUv );\ngl_FragColor = opacity * texel;\n}"};
THREE.OBJLoader=function(){function r(){var f={objects:[],object:{},vertices:[],normals:[],colors:[],uvs:[],materialLibraries:[],startObject:function(b,e){if(this.object&&!1===this.object.fromDeclaration)this.object.name=b,this.object.fromDeclaration=!1!==e;else{var c=this.object&&"function"===typeof this.object.currentMaterial?this.object.currentMaterial():void 0;this.object&&"function"===typeof this.object._finalize&&this.object._finalize(!0);this.object={name:b||"",fromDeclaration:!1!==e,geometry:{vertices:[],
normals:[],colors:[],uvs:[]},materials:[],smooth:!0,startMaterial:function(c,b){var a=this._finalize(!1);a&&(a.inherited||0>=a.groupCount)&&this.materials.splice(a.index,1);a={index:this.materials.length,name:c||"",mtllib:Array.isArray(b)&&0<b.length?b[b.length-1]:"",smooth:void 0!==a?a.smooth:this.smooth,groupStart:void 0!==a?a.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(a){a={index:"number"===typeof a?a:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,
groupEnd:-1,groupCount:-1,inherited:!1};a.clone=this.clone.bind(a);return a}};this.materials.push(a);return a},currentMaterial:function(){if(0<this.materials.length)return this.materials[this.materials.length-1]},_finalize:function(c){var b=this.currentMaterial();b&&-1===b.groupEnd&&(b.groupEnd=this.geometry.vertices.length/3,b.groupCount=b.groupEnd-b.groupStart,b.inherited=!1);if(c&&1<this.materials.length)for(var a=this.materials.length-1;0<=a;a--)0>=this.materials[a].groupCount&&this.materials.splice(a,
1);c&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth});return b}};c&&c.name&&"function"===typeof c.clone&&(c=c.clone(0),c.inherited=!0,this.object.materials.push(c));this.objects.push(this.object)}},finalize:function(){this.object&&"function"===typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(b,e){var c=parseInt(b,10);return 3*(0<=c?c-1:c+e/3)},parseNormalIndex:function(b,e){var c=parseInt(b,10);return 3*(0<=c?c-1:c+e/3)},parseUVIndex:function(b,
e){var c=parseInt(b,10);return 2*(0<=c?c-1:c+e/2)},addVertex:function(b,e,c){var d=this.vertices,h=this.object.geometry.vertices;h.push(d[b+0],d[b+1],d[b+2]);h.push(d[e+0],d[e+1],d[e+2]);h.push(d[c+0],d[c+1],d[c+2])},addVertexLine:function(b){var e=this.vertices;this.object.geometry.vertices.push(e[b+0],e[b+1],e[b+2])},addNormal:function(b,e,c){var d=this.normals,h=this.object.geometry.normals;h.push(d[b+0],d[b+1],d[b+2]);h.push(d[e+0],d[e+1],d[e+2]);h.push(d[c+0],d[c+1],d[c+2])},addColor:function(b,
e,c){var d=this.colors,h=this.object.geometry.colors;h.push(d[b+0],d[b+1],d[b+2]);h.push(d[e+0],d[e+1],d[e+2]);h.push(d[c+0],d[c+1],d[c+2])},addUV:function(b,e,c){var d=this.uvs,h=this.object.geometry.uvs;h.push(d[b+0],d[b+1]);h.push(d[e+0],d[e+1]);h.push(d[c+0],d[c+1])},addUVLine:function(b){var e=this.uvs;this.object.geometry.uvs.push(e[b+0],e[b+1])},addFace:function(b,e,c,d,h,a,g,f,m){var k=this.vertices.length;b=this.parseVertexIndex(b,k);e=this.parseVertexIndex(e,k);c=this.parseVertexIndex(c,
k);this.addVertex(b,e,c);void 0!==d&&(c=this.uvs.length,b=this.parseUVIndex(d,c),e=this.parseUVIndex(h,c),c=this.parseUVIndex(a,c),this.addUV(b,e,c));void 0!==g&&(d=this.normals.length,b=this.parseNormalIndex(g,d),e=g===f?b:this.parseNormalIndex(f,d),c=g===m?b:this.parseNormalIndex(m,d),this.addNormal(b,e,c));0<this.colors.length&&this.addColor(b,e,c)},addLineGeometry:function(b,e){this.object.geometry.type="Line";for(var c=this.vertices.length,d=this.uvs.length,f=0,a=b.length;f<a;f++)this.addVertexLine(this.parseVertexIndex(b[f],
c));c=0;for(a=e.length;c<a;c++)this.addUVLine(this.parseUVIndex(e[c],d))}};f.startObject("",!1);return f}function n(f){this.manager=void 0!==f?f:THREE.DefaultLoadingManager;this.materials=null}var t=/^[og]\s*(.+)?/,u=/^mtllib /,v=/^usemtl /;n.prototype={constructor:n,load:function(f,b,e,c){var d=this,h=new THREE.FileLoader(d.manager);h.setPath(this.path);h.load(f,function(a){b(d.parse(a))},e,c)},setPath:function(f){this.path=f},setMaterials:function(f){this.materials=f;return this},parse:function(f){console.time("OBJLoader");
var b=new r;-1!==f.indexOf("\r\n")&&(f=f.replace(/\r\n/g,"\n"));-1!==f.indexOf("\\\n")&&(f=f.replace(/\\\n/g,""));var e=f.split("\n"),c,d="function"===typeof"".trimLeft;f=0;for(var h=e.length;f<h;f++){var a=e[f];a=d?a.trimLeft():a.trim();var g=a.length;if(0!==g&&(g=a.charAt(0),"#"!==g))if("v"===g)switch(a=a.split(/\s+/),a[0]){case "v":b.vertices.push(parseFloat(a[1]),parseFloat(a[2]),parseFloat(a[3]));8===a.length&&b.colors.push(parseFloat(a[4]),parseFloat(a[5]),parseFloat(a[6]));break;case "vn":b.normals.push(parseFloat(a[1]),
parseFloat(a[2]),parseFloat(a[3]));break;case "vt":b.uvs.push(parseFloat(a[1]),parseFloat(a[2]))}else if("f"===g){var l=a.substr(1).trim().split(/\s+/);a=[];g=0;for(c=l.length;g<c;g++){var m=l[g];0<m.length&&(m=m.split("/"),a.push(m))}l=a[0];g=1;for(c=a.length-1;g<c;g++){m=a[g];var k=a[g+1];b.addFace(l[0],m[0],k[0],l[1],m[1],k[1],l[2],m[2],k[2])}}else if("l"===g){g=a.substring(1).trim().split(" ");c=[];l=[];if(-1===a.indexOf("/"))c=g;else for(a=0,m=g.length;a<m;a++)k=g[a].split("/"),""!==k[0]&&c.push(k[0]),
""!==k[1]&&l.push(k[1]);b.addLineGeometry(c,l)}else if(null!==(c=t.exec(a)))a=(" "+c[0].substr(1).trim()).substr(1),b.startObject(a);else if(v.test(a))b.object.startMaterial(a.substring(7).trim(),b.materialLibraries);else if(u.test(a))b.materialLibraries.push(a.substring(7).trim());else if("s"===g){if(c=a.split(" "),1<c.length?(a=c[1].trim().toLowerCase(),b.object.smooth="0"!==a&&"off"!==a):b.object.smooth=!0,a=b.object.currentMaterial())a.smooth=b.object.smooth}else if("\x00"!==a)throw Error('THREE.OBJLoader: Unexpected line: "'+
a+'"');}b.finalize();e=new THREE.Group;e.materialLibraries=[].concat(b.materialLibraries);f=0;for(h=b.objects.length;f<h;f++)if(d=b.objects[f],a=d.geometry,g=d.materials,c="Line"===a.type,0!==a.vertices.length){l=new THREE.BufferGeometry;l.addAttribute("position",new THREE.Float32BufferAttribute(a.vertices,3));0<a.normals.length?l.addAttribute("normal",new THREE.Float32BufferAttribute(a.normals,3)):l.computeVertexNormals();0<a.colors.length&&l.addAttribute("color",new THREE.Float32BufferAttribute(a.colors,
3));0<a.uvs.length&&l.addAttribute("uv",new THREE.Float32BufferAttribute(a.uvs,2));m=[];k=0;for(var n=g.length;k<n;k++){var p=g[k];a=void 0;if(null!==this.materials&&(a=this.materials.create(p.name),c&&a&&!(a instanceof THREE.LineBasicMaterial))){var q=new THREE.LineBasicMaterial;q.copy(a);a=q}a||(a=c?new THREE.LineBasicMaterial:new THREE.MeshPhongMaterial,a.name=p.name);a.flatShading=p.smooth?!1:!0;m.push(a)}if(1<m.length){k=0;for(n=g.length;k<n;k++)p=g[k],l.addGroup(p.groupStart,p.groupCount,k);
a=c?new THREE.LineSegments(l,m):new THREE.Mesh(l,m)}else a=c?new THREE.LineSegments(l,m[0]):new THREE.Mesh(l,m[0]);a.name=d.name;e.add(a)}console.timeEnd("OBJLoader");return e}};return n}();
function loadFile(c,b){var a=new XMLHttpRequest;a.overrideMimeType&&a.overrideMimeType("text/plain");a.open("get",c,!0);a.addEventListener("load",function(d){b(null,a.responseText)},!1);a.addEventListener("error",function(a){b(a)},!1);a.send()}function loadFiles(c,b,a){function d(a,g){if(b){var c=b;b=void 0;return c(a,g,h)}}var e=0,f={},h=a;c.forEach(function(a){++e;loadFile(a,function(b,c){if(b)return d(b);f[a]=c;--e;0==e&&d(null,f)})})};